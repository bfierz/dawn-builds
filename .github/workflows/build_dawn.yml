name: Build Dawn

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Build Windows MSVC x64 Debug",
            os: windows-latest,
            type: "Debug",
            flavor: win_msvc_debug.txt,
            package: dawn_win_x64_debug
          }
        - {
            name: "Build Windows MSVC x64 Release",
            os: windows-latest,
            type: "Release",
            flavor: win_msvc_release.txt,
            package: dawn_win_x64_release
          }
        - {
            name: "Build Linux Clang x64 Release",
            os: ubuntu-latest,
            type: "Release",
            flavor: linux_clang_release.txt,
            package: dawn_linux_x64_release
          }
    steps:
      - uses: actions/checkout@v1

      - name: Prepare Depot Tools
        shell: pwsh
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          $env:PATH = '' + (Get-Location) + '/depot_tools' + [System.IO.Path]::PathSeparator + $env:PATH
          gclient --version

      - name: Prepare Google Dawn
        shell: pwsh
        run: |
          $env:PATH = '' + (Get-Location) + '/depot_tools' + [System.IO.Path]::PathSeparator + $env:PATH
          $env:DEPOT_TOOLS_WIN_TOOLCHAIN = '0'
          git clone https://dawn.googlesource.com/dawn --no-checkout
          # Get commit to build
          $builds = Get-Content -Raw -Path build.json | ConvertFrom-Json
          $commit = $builds.commits[0].commit
          # Prepare build environment and fetch dependencies
          pushd dawn
          git checkout $commit
          cp scripts/standalone.gclient .gclient
          gclient sync
          popd

      - name: Configure build of Google Dawn
        shell: pwsh
        run: |
          $env:PATH = '' + (Get-Location) + '/depot_tools' + [System.IO.Path]::PathSeparator + $env:PATH
          $env:DEPOT_TOOLS_WIN_TOOLCHAIN = '0'
          mkdir dawn/out
          cp flavors/${{ matrix.config.flavor }} dawn/out/args.gn
          pushd dawn
          gn gen out --target_cpu="x64"
          popd

      - name: Build Google Dawn
        shell: pwsh
        run: |
          $env:PATH = '' + (Get-Location) + '/depot_tools' + [System.IO.Path]::PathSeparator + $env:PATH
          $env:DEPOT_TOOLS_WIN_TOOLCHAIN = '0'
          ninja -C dawn/out dawn_native_shared dawn_proc_shared dawncpp
          cmake -S webgpucpp -B webgpucpp/build
          if ('${{ matrix.config.type }}' -eq 'Debug') {
            cmake --build webgpucpp/build --config Debug
          } else {
            cmake --build webgpucpp/build --config RelWithDebInfo
          }

      - name: Pack
        shell: pwsh
        run: |
          mkdir package
          mkdir package/bin
          mkdir package/lib
          mkdir package/include
          Copy-Item -Path "dawn/LICENSE" -Destination "package/LICENSE"
          Copy-Item -Path "dawn/src/include/*" -Destination "package/include" -Recurse
          Copy-Item -Path "dawn/out/gen/src/include/*" -Destination "package/include" -Recurse -Force
          Get-ChildItem dawn/out -Filter dawn_*.dll | Copy-Item -Destination "package/bin"
          Get-ChildItem dawn/out -Filter dawn_*.lib | Copy-Item -Destination "package/lib"
          Get-ChildItem webgpucpp/build/bin -Filter *.lib | Copy-Item -Destination "package/lib"
          Compress-Archive -Path package/* -DestinationPath ${{ matrix.config.package }}.zip

          if ('${{ matrix.config.type }}' -eq 'Debug') {
            mkdir symbols
            Get-ChildItem dawn/out -Filter dawn_*.pdb | Copy-Item -Destination "symbols"
            Get-ChildItem webgpucpp/build/bin -Filter *.pdb | Copy-Item -Destination "symbols"
            Compress-Archive -Path symbols/* -DestinationPath ${{ matrix.config.package }}_pdb.zip
          }

          # Create version number for release
          pushd dawn
          $commitDate = (git log -1 --format="%ct")
          $commitDatePretty = (([System.DateTimeOffset]::FromUnixTimeSeconds($commitDate)).DateTime).ToString("yyyyMMdd")
          $shortHash = (git log -1 --format="%h")
          popd
          Write-Output "$commitDatePretty-$shortHash" >> VERSION

      - name: Upload Version
        uses: actions/upload-artifact@v2
        with:
          name: version
          path: ./VERSION

      - name: Upload Library
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.config.package }}.zip
          path: ./${{ matrix.config.package }}.zip

      - name: Upload Debug Symbols
        uses: actions/upload-artifact@v2
        if: ${{ matrix.config.type == 'Debug' }}
        with:
          name: ${{ matrix.config.package }}_pdb.zip
          path: ./${{ matrix.config.package }}_pdb.zip

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Download Release Version
      uses: actions/download-artifact@v1
      with:
        name: version
        path: ./

    - name: Parse Release Version
      id: parse_version
      run: |
        echo "::set-output name=version::$(cat VERSION)"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: 0.0.${{ steps.parse_version.outputs.version }}
        release_name: Release v0.0.${{ steps.parse_version.outputs.version }}
        draft: false
        prerelease: true

    - name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url
    - uses: actions/upload-artifact@v1
      with:
        path: ./upload_url
        name: upload_url

  publish:
    name: ${{ matrix.config.name }}
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Publish Windows MSVC x64 Debug",
            artifact: "dawn_win_x64_debug.zip"
          }
        - {
            name: "Publish Windows MSVC x64 Debug PDB",
            artifact: "dawn_win_x64_debug_pdb.zip"
          }
        - {
            name: "Publish Windows MSVC x64 Release",
            artifact: "dawn_win_x64_release.zip"
          }
        - {
            name: "Publish Linux Clang x64 Release",
            artifact: "dawn_linux_x64_release.zip"
          }
    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: ${{ matrix.config.artifact }}
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url
    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./${{ matrix.config.artifact }}
        asset_name: ${{ matrix.config.artifact }}
        asset_content_type: application/zip
